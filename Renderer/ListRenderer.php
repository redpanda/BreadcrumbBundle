<?php

namespace Bundle\BreadcrumbBundle\Renderer;
use Bundle\BreadcrumbBundle\BreadcrumbItem;
use Bundle\BreadcrumbBundle\BreadcrumbPath;
use Bundle\BreadcrumbBundle\Renderer\RendererInterface;

/**
 * Renders BreadcrumbItem tree
 */
class ListRenderer extends Renderer implements RendererInterface
{
    /**
     * @see RendererInterface::render
     */
    public function render(BreadcrumbItem $item = null)
    {
    	if (null === $item) {
    		return '';
    	}

    	return $this->doRender($item);
    }

    /**
     * Renders breadcrumbs tree. Internal method.
     *
     * @param \Bundle\BreadcrumbBundle\BreadcrumbItem  $item        Breadcrumb item
     *
     * @return string
     */
    protected function doRender(BreadcrumbItem $item)
    {
        if (!$item->hasChildren()) {
            return '';
        }

        $html = $this->format('<ul>');
        $html .= $this->renderChildren($item);
        $html .= $this->format('</ul>');

        return $html;
    }

    /**
     * Renders all of the children of this breadcrumb item.
     *
     * @param  \Bundle\BreadcrumbBundle\BreadcrumbItem $item The breadcrumb item
     *
     * @return string
     */
    public function renderChildren($item)
    {
        $html = '';
        foreach ($item->getChildren() as $path) {
            $html .= $this->renderPath($path);
        }
        return $html;
    }

    /**
     * Returns an <li> tag generated by the breadcrumb path.
     *
     * @param \Bundle\BreadcrumbBundle\BreadcrumbPath $path The breadcrum path
     *
     * @return string
     */
    public function renderPath(BreadcrumbPath $path)
    {
        // opening li tag
        $html = $this->format('<li>');

        // render the text/link inside the li tag
        $html .= $this->format($path->getRoute() ? $path->renderLink() : $path->renderName());

        // closing li tag
        $html .= $this->format('</li>');

        return $html;
    }

    /**
     *
     *
     * @param  string $html The html to render in an (un)formatted way
     */
    protected function format($html)
    {
        if ($this->renderCompressed) {
            return $html;
        }

        return $html."\n";
    }
}